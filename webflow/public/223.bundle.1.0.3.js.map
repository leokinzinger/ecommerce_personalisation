{"version":3,"file":"223.bundle.1.0.3.js","mappings":"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","sources":["webpack://webflow_dev_template/./src/utils.js","webpack://webflow_dev_template/./src/generate_products.js"],"sourcesContent":["export function setupForm (formId, onSubmitCustom, submitFormData, responseHandler = null,show_success=true) {\n    const formElement = document.getElementById(formId);\n\n    // Remove Webflow's form styling class\n    formElement.parentElement.classList.remove('w-form');\n\n    // Set the form submission event handler\n    formElement.onsubmit = async (event) => {\n        event.preventDefault();\n        const submitButton = formElement.querySelector('[w-el=\"SubmitButton\"]');\n\n        // Handle the submit button state during form processing\n        handleButtonState(submitButton, true);\n\n        try {\n            const customData = onSubmitCustom(new FormData(formElement),event);\n            const response = await submitFormData(customData);\n            responseHandler(response);\n        } catch (error) {\n            console.error(error);\n        } finally {\n            // Restore the submit button to its initial state\n            handleButtonState(submitButton, false);\n        }\n    };\n}\n\n/**\n * Handles the state of the submit button during form processing.\n * \n * @param {HTMLElement} button - The submit button element.\n * @param {boolean} isLoading - Indicates if the form is in the loading state.\n */\nfunction handleButtonState(button, isLoading) {\n\n    if (isLoading) {\n        button.value = button.getAttribute('data-wait');\n    } else {\n        button.value = button.getAttribute('data-initial-state');\n    }\n}\n\n/**\n * Creates a cookie with a specified key and value that expires in 24 hours.\n * \n * @param {string} key - The key (name) of the cookie.\n * @param {string} value - The value of the cookie.\n */\nfunction createCookie(key, value) {\n    \n    const encodedValue = encodeURIComponent(value);\n\n    const date = new Date();\n    // Set the expiry of the cookie to 24 hours from now\n    date.setTime(date.getTime() + (24 * 60 * 60 * 1000));\n    const expires = \"expires=\" + date.toUTCString();\n    // Set the cookie with the key, value, expiry, and security attributes\n    document.cookie = key + \"=\" + encodedValue + \";\" + expires + \";path=/;\";\n}\n\n/**\n * Deletes a cookie by its key. This is done by setting the cookie's expiry date\n * to a past date, effectively removing it.\n * \n * @param {string} key - The key (name) of the cookie to delete.\n */\nfunction deleteCookie(key) {\n    // Set the cookie with an expired date, effectively deleting it\n    document.cookie = key + \"=;expires=Thu, 01 Jan 1970 00:00:00 GMT;path=/;SameSite=Lax;Secure\";\n}\n\n/**\n * Retrieves the value of a cookie by its key. If the cookie does not exist, returns an empty string.\n * \n * @param {string} key - The key (name) of the cookie to retrieve.\n * @return {string} The value of the cookie, or an empty string if the cookie does not exist.\n */\nfunction getCookie(key) {\n    // Encode the key to handle special characters correctly\n    const name = key + \"=\";\n    const decodedCookie = decodeURIComponent(document.cookie);\n    const ca = decodedCookie.split(';');\n    for(let i = 0; i <ca.length; i++) {\n        let c = ca[i];\n        while (c.charAt(0) === ' ') {\n            c = c.substring(1);\n        }\n        if (c.indexOf(name) === 0) {\n            return c.substring(name.length, c.length);\n        }\n    }\n    return \"\";\n}\n\n/**\n * Checks how many more times the user is allowed to call a specific function and returns the number of remaining calls.\n * If the user has reached the limit, it returns 0.\n *\n * @return {number} The number of times the user can still call the function.\n */\nexport function checkCallLimit() {\n    const functionName = 'generateSneaker';\n    let calls = parseInt(getCookie(functionName), 10);\n  \n    if (isNaN(calls)) {\n      // If the cookie does not exist, the user can call the function 3 times\n      return 3;\n    } else if (calls < 3) {\n      // If the number of calls is less than 3, return the remaining calls\n      return 3 - calls;\n    } else {\n      // If the limit has been reached or exceeded, return 0\n      return 0;\n    }\n  }\n  \n  /**\n   * Increments the count of how many times the user has called a specific function.\n   * This should be called after the function executes successfully.\n   */\nexport function incrementCallCount() {\n    const functionName = 'generateSneaker';\n    let calls = parseInt(getCookie(functionName), 10);\n  \n    if (!isNaN(calls) && calls < 3) {\n      // If the cookie exists and the limit has not been reached, increment the counter\n      calls++;\n    } else if (isNaN(calls)) {\n      // If the cookie does not exist, initialize it with 1\n      calls = 1;\n    } else {\n      // If the limit is reached, don't increment\n      return;\n    }\n  \n    createCookie(functionName, String(calls));\n}\n\n/**\n * Updates the text content of all child elements of a specified parent element, identified by a query selector.\n * \n * @param {string} querySelector - The CSS query selector to identify the parent element.\n * @param {string} text - The new text content to set for each of the parent element's child elements.\n */\nexport function updateSuccessMessage(querySelector, text) {\n    // Find the parent element using the query selector\n    const parentElement = document.querySelector(querySelector);\n  \n    if (parentElement) {\n        // Iterate over all child elements of the parent element\n        Array.from(parentElement.children).forEach(child => {\n        // Update the text content of each child element\n        child.textContent = text;\n        });\n\n        parentElement.style.display = 'flex';\n\n        setTimeout(function() {\n            parentElement.style.display = 'none';\n        }, 45000); // 45000 milliseconds = 45 seconds\n    } else {\n      console.error('Element not found with the given query selector.');\n    }\n}\n\n/**\n * Updates the text content of all child elements of a specified parent element, identified by a query selector,\n * with an error message.\n * \n * @param {string} querySelector - The CSS query selector to identify the parent element.\n * @param {string} text - The new error message text content to set for each of the parent element's child elements.\n */\nexport function updateErrorMessage(querySelector, text) {\n    // Find the parent element using the query selector\n    const parentElement = document.querySelector(querySelector);\n  \n    if (parentElement) {\n        // Iterate over all child elements of the parent element\n        Array.from(parentElement.children).forEach(child => {\n            // Update the text content of each child element with the error message\n            child.textContent = text;\n        });\n\n        parentElement.style.display = 'flex';\n\n        parentElement.style.display = 'flex';\n\n        setTimeout(function() {\n                parentElement.style.display = 'none';\n        }, 45000); // 45000 milliseconds = 45 seconds\n    } else {\n      console.error('Element not found with the given query selector.');\n    }\n}\n  \n\n  \n  ","import { checkCallLimit, incrementCallCount, setupForm, updateErrorMessage, updateSuccessMessage } from \"./utils\"\n\nexport function render(){\n    setupForm('wf-form-Generate-Product-Form',transformFormData,submitFormData,responseHandler);\n}\n\nfunction transformFormData(formData) {\n    \n    //addLoader(image_wrapper);\n    \n    const transformedData = {\n        form: formData.get('product_shape'),\n        sole: formData.get('product_sole'),\n        bodyMaterial: formData.get('product_material'),\n        bodyPattern: formData.get('product_pattern'),\n        laces: formData.get('product_laces'),\n        generalstyle: formData.get('product_gender')\n    }\n\n    return transformedData;\n}\n\nasync function submitFormData (formData) {\n    // Assuming `formData` is your FormData object\n    console.log(formData)\n\n    //hide/show starter description and result component\n    const starterDescription = document.querySelector('.starter-description');\n    const resultsComponent = document.querySelector('.results_components');\n\n    // increment call count for the user\n    incrementCallCount();\n    \n    // check call limit for user\n    const remainingCalls = checkCallLimit();\n\n    if (remainingCalls > 0) {\n\n        // Check if the element has a class named 'myClass'\n        if (resultsComponent.classList.contains('hide')) {\n            starterDescription.classList.add('hide');\n            resultsComponent.classList.remove('hide');\n        }\n\n        updateSuccessMessage('.success-message',`Please wait around 30 seconds for your sneaker image to be generated. You have ${remainingCalls} generation attempt(s) left.`)\n    } else {\n        return {success:false, data:\"no remaining calls\"}\n    }\n\n    // Send the POST request to the server\n    // const response = await fetch(`https://us-central1-quiet-amp-415709.cloudfunctions.net/genai_for_product_design_1`, {\n    //     method: 'POST',\n    //     body: JSON.stringify(formData),\n    //     headers: {\n    //         \"Content-Type\": \"application/json\"\n    //     }\n    // });\n\n    // const data = await response.json()\n\n    return {success:true,data: 'test'}\n\n    if (response.ok)\n  \n        return {success:true, data: data};\n    \n    else {\n        return {success:false, data: null};\n    }\n}\n\nfunction responseHandler (response) {\n\n    if (response.success) {\n        console.log('success!');\n        console.log(response);\n        // const image = document.getElementById('generated_image');\n        // image.src = response.data.image_url;\n\n        // const image_wrapper = document.getElementById('image_wrapper');\n\n        //removeLoader(image_wrapper);\n    } else if (!response.success && response.data === \"no remaining calls\"){\n        updateErrorMessage('.error-message','You have reached the maximum number of sneaker image generations allowed (3). Please try again in 12h.')\n    }\n        else {\n        updateErrorMessage('.error-message','Something went wrong.')\n    }\n}\n\nfunction addLoader(parentElement) {\n    const html = `<div class=\"skeleton-loader\"></div>`\n    return parentElement.insertAdjacentHTML(\"beforeend\", html);\n}\n\nfunction removeLoader (parentElement) {\n\n    // Find all children with the 'skeleton-loader' class\n    var loaders = parentElement.querySelectorAll('.skeleton-loader');\n\n    // Loop through the NodeList and remove each element\n    loaders.forEach(function(loader) {\n        loader.parentNode.removeChild(loader);\n    });\n\n}"],"names":["handleButtonState","button","isLoading","value","getAttribute","getCookie","key","name","ca","decodeURIComponent","document","cookie","split","i","length","c","charAt","substring","indexOf","updateErrorMessage","querySelector","text","parentElement","Array","from","children","forEach","child","textContent","style","display","setTimeout","console","error","render","formId","onSubmitCustom","submitFormData","responseHandler","show_success","formElement","getElementById","classList","remove","onsubmit","async","event","preventDefault","submitButton","customData","FormData","response","setupForm","transformFormData","formData","form","get","sole","bodyMaterial","bodyPattern","laces","generalstyle","log","starterDescription","resultsComponent","functionName","calls","parseInt","isNaN","encodedValue","encodeURIComponent","date","Date","setTime","getTime","expires","toUTCString","createCookie","String","incrementCallCount","remainingCalls","checkCallLimit","contains","add","updateSuccessMessage","success","data"],"sourceRoot":""}